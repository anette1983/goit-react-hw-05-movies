{"version":3,"file":"static/js/387.99fa3146.chunk.js","mappings":"8PAEaA,E,QAAWC,GAAAA,GAAH,gJ,4BCIbC,EAAcC,EAAQ,MAAtBD,UA4DR,EA1Da,WACX,OAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,EAAYT,IAAZS,QAEFC,EAAY,mCAAG,WAAMC,GAAN,8EACnBL,GAAa,GADM,mBAGEM,EAAAA,EAAAA,GAAUD,GAHZ,WAGXE,EAHW,QAIPV,KAAKW,OAJE,sBAKT,IAAIC,MAAJ,kCALS,OAOjBX,EAAQS,EAAKV,MAPI,kDASjBK,EAAS,EAAD,IATS,yBAWjBF,GAAa,GAXI,6EAAH,sDAuBlB,OARAU,EAAAA,EAAAA,YAAU,WACHP,GAGLC,EAAaD,EACd,GAAE,CAACA,KAIF,UAACX,EAAD,WACGS,IAAS,uBAAIA,EAAMU,UACnBZ,IAAa,SAACa,EAAA,EAAD,IACbf,EAAKgB,KAAI,gBAAGC,EAAH,EAAGA,UAAWT,EAAd,EAAcA,GAAUU,EAAxB,EAAkBC,KAAiBC,EAAnC,EAAmCA,aAAnC,OACR,2BACE,0BACE,gBACEC,IACED,EAAY,0CAC2BA,GAD3B,UAELE,GAETC,IAAKL,EACLM,MAAM,MACNC,QAAQ,YAGZ,4BACE,uBAAIP,KACJ,uCAAeD,UAfVT,EADD,MAsBf,C,iEC5DKO,EAAS,SAAAW,GAAK,OAChB,UAAC,MAAD,gBACEC,QAAQ,cACRC,OAAQ,IACRJ,MAAO,IACPK,MAAM,UACNC,gBAAgB,UAChBC,MAAO,CAAEP,MAAO,SACZE,GAPN,eASE,mBAAQM,GAAG,MAAMC,GAAG,KAAKC,EAAE,OAC3B,mBAAQF,GAAG,MAAMC,GAAG,KAAKC,EAAE,OAC3B,mBAAQF,GAAG,MAAMC,GAAG,KAAKC,EAAE,SAZb,EAgBlBnB,EAAOoB,SAAW,CAChBhB,KAAM,OACNiB,OAAQ,aACRC,YAAa,aACbC,SAAU,aAgBZ,K,kMCtCFC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCACVC,EAAe,qCAAiCD,GAEzCE,EAAmB,mCAAG,oGACVH,EAAAA,EAAAA,IAAA,UAClBE,IAF4B,cAC3BE,EAD2B,yBAI5BA,EAASjC,MAJmB,2CAAH,qDAOnBkC,EAAiB,mCAAG,WAAOpC,GAAP,uFACN+B,EAAAA,EAAAA,IAAA,gBACV/B,EADU,oBACIgC,EADJ,oBADM,cACvBG,EADuB,yBAKtBA,EAASjC,MALa,2CAAH,sDASjBD,EAAS,mCAAG,WAAOD,GAAP,uFACA+B,EAAAA,EAAAA,IAAA,gBACZ/B,EADY,4BACUgC,EADV,oBADA,cACjBG,EADiB,yBAKlBA,EAASjC,MALS,2CAAH,sDAQTmC,EAAY,mCAAG,WAAOrC,GAAP,uFACH+B,EAAAA,EAAAA,IAAA,gBACZ/B,EADY,4BACUgC,EADV,oBADG,cACpBG,EADoB,yBAKrBA,EAASjC,MALY,2CAAH,sDASZoC,EAAY,mCAAG,WAAOC,GAAP,uFACHR,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCO,EADnC,gCADG,cACpBJ,EADoB,yBAKrBA,EAASjC,MALY,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledUl = styled.ul`\npadding: 16px;\nli {\n    display: flex;\n    margin-bottom: 12px;\n}\ndiv {\n    padding: 16px;\n    width: 300px;\n}\n`","import { useState, useEffect } from 'react';\nimport { fetchCast } from 'services/api';\nimport { StyledUl } from './Cast.styled';\nimport Loader from 'components/Loader/Loader';\nimport placeholder from '../../images/placeholder.png';\n\nconst { useParams } = require('react-router-dom');\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  const getMovieCast = async id => {\n    setIsLoading(true);\n    try {\n      const data = await fetchCast(id);\n      if (!data.cast.length) {\n        throw new Error(`Sorry, there isn't any info :(`);\n      }\n      setCast(data.cast);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    getMovieCast(movieId);\n  }, [movieId]);\n  // прямо тут хттп запрос\n  // монтируем компонент, берем инфу из урл, уточняя, для кого брать данные и в юзэффкте запускаем хттп запрос\n  return (\n    <StyledUl>\n      {error && <p>{error.message}</p>}\n      {isLoading && <Loader />}\n      {cast.map(({ character, id, name: actorName, profile_path }) => (\n        <li key={id}>\n          <div>\n            <img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w300/${profile_path}`\n                  : `${placeholder}`\n              }\n              alt={actorName}\n              width=\"300\"\n              loading=\"lazy\"\n            />\n          </div>\n          <div>\n            <p>{actorName}</p>\n            <p>Character: {character}</p>\n          </div>\n        </li>\n      ))}\n    </StyledUl>\n  );\n};\n\nexport default Cast;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n// import { Watch } from  'react-loader-spinner'\n\nconst Loader = props => (\n    <ContentLoader\n      viewBox=\"0 0 400 160\"\n      height={160}\n      width={400}\n      color=\"#3f51b5\"\n      backgroundColor=\"#3f51b5\"\n      style={{ width: '100%' }}\n      {...props}\n    >\n      <circle cx=\"150\" cy=\"86\" r=\"8\" />\n      <circle cx=\"194\" cy=\"86\" r=\"8\" />\n      <circle cx=\"238\" cy=\"86\" r=\"8\" />\n    </ContentLoader>\n  )\n  \n  Loader.metadata = {\n    name: 'RioF',\n    github: 'clariokids',\n    description: 'Three Dots',\n    filename: 'ThreeDots',\n  }\n\n// {/* <Watch\n//   height=\"80\"\n//   width=\"80\"\n//   radius=\"48\"\n//   color=\"#3f51b5\"\n//   ariaLabel=\"watch-loading\"\n//   wrapperStyle={{\n//     display: 'block',\n//     margin: '0 auto',\n//   }}\n//   visible={true}\n// /> */}\n  \n  export default Loader;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'db7375c0f22b53ce13cc7eb00cc2cfa1';\nconst trendingOptions = `trending/movie/day?api_key=${API_KEY}`;\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `${trendingOptions}`\n  );\nreturn response.data;\n};\n\nexport const fetchMovieDetails = async (id) => {\n    const response = await axios.get(\n        `movie/${id}?api_key=${API_KEY}&language=en-US`\n      );\n      \n    return response.data;\n}\n\n\nexport const fetchCast = async (id) => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  \nreturn response.data;\n}\n\nexport const fetchReviews = async (id) => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  \nreturn response.data;\n}\n\n\nexport const searchMovies = async (query) => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  \nreturn response.data;\n}\n\n\n"],"names":["StyledUl","styled","useParams","require","useState","cast","setCast","isLoading","setIsLoading","error","setError","movieId","getMovieCast","id","fetchCast","data","length","Error","useEffect","message","Loader","map","character","actorName","name","profile_path","src","placeholder","alt","width","loading","props","viewBox","height","color","backgroundColor","style","cx","cy","r","metadata","github","description","filename","axios","API_KEY","trendingOptions","fetchTrendingMovies","response","fetchMovieDetails","fetchReviews","searchMovies","query"],"sourceRoot":""}