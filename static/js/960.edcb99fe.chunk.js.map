{"version":3,"file":"static/js/960.edcb99fe.chunk.js","mappings":"iLAIMA,EAAS,SAAAC,GAAK,OAChB,UAAC,MAAD,gBACEC,QAAQ,cACRC,OAAQ,IACRC,MAAO,IACPC,MAAM,UACNC,gBAAgB,UAChBC,MAAO,CAAEH,MAAO,SACZH,GAPN,eASE,mBAAQO,GAAG,MAAMC,GAAG,KAAKC,EAAE,OAC3B,mBAAQF,GAAG,MAAMC,GAAG,KAAKC,EAAE,OAC3B,mBAAQF,GAAG,MAAMC,GAAG,KAAKC,EAAE,SAZb,EAgBlBV,EAAOW,SAAW,CAChBC,KAAM,OACNC,OAAQ,aACRC,YAAa,aACbC,SAAU,aAgBZ,K,8ICtCWC,E,QAAWC,GAAAA,GAAH,2E,kBCGbC,EAAcC,EAAQ,MAAtBD,UA+CR,EA7CgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,EAAYT,IAAZS,QAEFC,EAAc,mCAAG,WAAMC,GAAN,8EACrBL,GAAa,GADQ,mBAGAM,EAAAA,EAAAA,IAAaD,GAHb,UAGbE,EAHa,OAInBC,QAAQC,IAAI,YAAaF,GACpBA,EAAKG,QAAQC,OALC,sBAMX,IAAIC,MAAJ,+CANW,OAQnBd,EAAWS,EAAKG,SARG,kDAUnBR,EAAS,EAAD,IAVW,yBAYnBF,GAAa,GAZM,6EAAH,sDAyBpB,OATAa,EAAAA,EAAAA,YAAU,WACHV,GAGLC,EAAeD,EAChB,GAAE,CAACA,KAKF,UAACX,EAAD,WACGS,IAAS,uBAAIA,EAAMa,UACnBf,IAAa,SAACvB,EAAA,EAAD,IACbqB,EAAQkB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASZ,EAApB,EAAoBA,GAApB,OACX,2BACE,oCAAYW,MACZ,uBAAIC,MAFGZ,EADE,MAQlB,C,kMChDDa,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCACVC,EAAe,qCAAiCD,GAEzCE,EAAmB,mCAAG,oGACVH,EAAAA,EAAAA,IAAA,UAClBE,IAF4B,cAC3BE,EAD2B,yBAI5BA,EAASf,MAJmB,2CAAH,qDAOnBgB,EAAiB,mCAAG,WAAOlB,GAAP,uFACNa,EAAAA,EAAAA,IAAA,gBACVb,EADU,oBACIc,EADJ,oBADM,cACvBG,EADuB,yBAKtBA,EAASf,MALa,2CAAH,sDASjBiB,EAAS,mCAAG,WAAOnB,GAAP,uFACAa,EAAAA,EAAAA,IAAA,gBACZb,EADY,4BACUc,EADV,oBADA,cACjBG,EADiB,yBAKlBA,EAASf,MALS,2CAAH,sDAQTD,EAAY,mCAAG,WAAOD,GAAP,uFACHa,EAAAA,EAAAA,IAAA,gBACZb,EADY,4BACUc,EADV,oBADG,cACpBG,EADoB,yBAKrBA,EAASf,MALY,2CAAH,sDASZkB,EAAY,mCAAG,WAAOC,GAAP,uFACHR,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCO,EADnC,gCADG,cACpBJ,EADoB,yBAKrBA,EAASf,MALY,2CAAH,qD","sources":["components/Loader/Loader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import React from 'react';\nimport ContentLoader from 'react-content-loader';\n// import { Watch } from  'react-loader-spinner'\n\nconst Loader = props => (\n    <ContentLoader\n      viewBox=\"0 0 400 160\"\n      height={160}\n      width={400}\n      color=\"#3f51b5\"\n      backgroundColor=\"#3f51b5\"\n      style={{ width: '100%' }}\n      {...props}\n    >\n      <circle cx=\"150\" cy=\"86\" r=\"8\" />\n      <circle cx=\"194\" cy=\"86\" r=\"8\" />\n      <circle cx=\"238\" cy=\"86\" r=\"8\" />\n    </ContentLoader>\n  )\n  \n  Loader.metadata = {\n    name: 'RioF',\n    github: 'clariokids',\n    description: 'Three Dots',\n    filename: 'ThreeDots',\n  }\n\n// {/* <Watch\n//   height=\"80\"\n//   width=\"80\"\n//   radius=\"48\"\n//   color=\"#3f51b5\"\n//   ariaLabel=\"watch-loading\"\n//   wrapperStyle={{\n//     display: 'block',\n//     margin: '0 auto',\n//   }}\n//   visible={true}\n// /> */}\n  \n  export default Loader;","import styled from \"styled-components\";\n\nexport const StyledUl = styled.ul`\n    padding: 16px;\n    /* max-width: 80%; */\n\n\n`","import { useState, useEffect } from 'react';\nimport { fetchReviews } from 'services/api';\nimport { StyledUl } from './Reviews.styled';\nimport Loader from 'components/Loader/Loader';\n\nconst { useParams } = require('react-router-dom');\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  const getMovieReview = async id => {\n    setIsLoading(true);\n    try {\n      const data = await fetchReviews(id);\n      console.log('data :>> ', data);\n      if (!data.results.length) {\n        throw new Error(`We don't have any reviews for this movie :(`);\n      }\n      setReviews(data.results);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    getMovieReview(movieId);\n  }, [movieId]);\n\n  // прямо тут хттп запрос\n  // монтируем компонент, берем инфу из урл, уточняя, для кого брать данные и в юзэффкте запускаем хттп запрос\n  return (\n    <StyledUl>\n      {error && <p>{error.message}</p>}\n      {isLoading && <Loader />}\n      {reviews.map(({ author, content, id }) => (\n        <li key={id}>\n          <p>Author: {author}</p>\n          <p>{content}</p>\n        </li>\n      ))}\n    </StyledUl>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'db7375c0f22b53ce13cc7eb00cc2cfa1';\nconst trendingOptions = `trending/movie/day?api_key=${API_KEY}`;\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `${trendingOptions}`\n  );\nreturn response.data;\n};\n\nexport const fetchMovieDetails = async (id) => {\n    const response = await axios.get(\n        `movie/${id}?api_key=${API_KEY}&language=en-US`\n      );\n      \n    return response.data;\n}\n\n\nexport const fetchCast = async (id) => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  \nreturn response.data;\n}\n\nexport const fetchReviews = async (id) => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  \nreturn response.data;\n}\n\n\nexport const searchMovies = async (query) => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  \nreturn response.data;\n}\n\n\n"],"names":["Loader","props","viewBox","height","width","color","backgroundColor","style","cx","cy","r","metadata","name","github","description","filename","StyledUl","styled","useParams","require","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","movieId","getMovieReview","id","fetchReviews","data","console","log","results","length","Error","useEffect","message","map","author","content","axios","API_KEY","trendingOptions","fetchTrendingMovies","response","fetchMovieDetails","fetchCast","searchMovies","query"],"sourceRoot":""}